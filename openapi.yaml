openapi: 3.0.1
info:
  title: NLP server API
  description: NLP server API allowing to create/train agents and match user messages.
  version: '0.1'
servers:
  - url: 'http://localhost:4041/api'
tags:
  - name: agent
paths:
  /agent:
    post:
      tags:
        - agent
      description: Create an agent
      summary: Create an agent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentInit'
            examples:
              '0':
                value: "{\r\n    \"agentId\": \"MyBot\"\r\n}"
      responses:
        '201':
          description: Agent created
      servers:
        - url: 'http://localhost:4041/api'
    servers:
      - url: 'http://localhost:4041/api'
  /agent/{agentId}:
    get:
      tags:
        - agent
      description: Get agent config and status
      summary: Get agent config and status
      parameters:
        - name: agentId
          description: the agent id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agent config and status
          content:
            application/json:
              schema:
                type: object
      servers:
        - url: 'http://localhost:4041/api'
    servers:
      - url: 'http://localhost:4041/api'
  /api/agent/{agentId}/train:
    post:
      description: Train agent
      summary: Train agent
      tags:
        - train
      parameters:
        - name: agentId
          description: The id of the agent to train
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingData'
            examples:
              '0':
                value: "{\r\n    \"config\": {\r\n        \"language\": \"en\"\r\n    },\r\n    \"entities\": [\r\n        {\"entityName\": \"PlanetEntity\",\r\n        \"type\": \"enum\",\r\n        \"literals\":[\r\n            {\"value\": \"Earth\", \"synonyms\": [\"Earth\"]},\r\n            {\"value\": \"Mars\", \"synonyms\": [\"Mars\"]}\r\n        ]}\r\n\r\n    ],\r\n    \"intents\": [\r\n     {\r\n     \"intentName\": \"HelloIntent\",\r\n     \"examples\": [\r\n           {\"userSays\": \"Hello from %PlanetEntity%\"}\r\n     ],\r\n    \"parameters\": [ {\r\n        \"slot\": \"PlanetEntity\"\r\n    }\r\n\r\n    ]}\r\n\r\n    ]\r\n\r\n}\r\n"
      responses:
        '200':
          description: Training started
      servers:
        - url: 'http://localhost:4041/api'
    servers:
      - url: 'http://localhost:4041/api'
  /agent/{agentId}/process:
    post:
      tags:
        - process
      parameters:
        - name: agentId
          description: The id of the agent to use for the proccessing
          in: path
          required: true
          schema:
            type: string
      description: Process the user message and get the matched intents
      summary: Process a user message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMessage'
            examples:
              '0':
                value: "{\r\n    \"message\": \"Hello from planet earth\"\r\n}"
      responses:
        '200':
          description: Auto generated using Swagger Inspector
          content:
            application/json:
              schema:
                type: object
      servers:
        - url: 'http://localhost:4041/api'
    servers:
      - url: 'http://localhost:4041/api'
components:
  schemas:
    IntentExample:
      type: object
      properties:
        userSays:
          type: string
    IntentParameter:
      type: object
      properties:
        slot:
          type: string
    Intent:
      type: object
      properties:
        examples:
          type: array
          items:
            $ref: '#/components/schemas/IntentExample'
        intentName:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/IntentParameter'
    EntityValue:
      type: object
      properties:
        synonyms:
          type: array
          items:
            type: string
        value:
          type: string
    Entity:
      type: object
      properties:
        literals:
          type: array
          items:
            $ref: '#/components/schemas/EntityValue'
        entityName:
          type: string
        type:
          type: string
    AgentConfig:
      type: object
      properties:
        language:
          type: string
    TrainingData:
      type: object
      properties:
        intents:
          type: array
          items:
            $ref: '#/components/schemas/Intent'
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        config:
          $ref: '#/components/schemas/AgentConfig'
    AgentInit:
      type: object
      properties:
        agentId:
          type: string
    UserMessage:
      type: object
      properties:
        message:
          type: string
